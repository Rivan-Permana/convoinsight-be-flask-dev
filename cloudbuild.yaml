# Cloud Build pipeline: Build → Push (Artifact Registry) → Deploy (Cloud Run)

substitutions:
  _SERVICE: "convoinsight-be-flask"
  _REGION: "asia-southeast2"
  _REPO: "convoinsight"

  _MIN_INSTANCES: "0"
  _MAX_INSTANCES: "5"
  _CONCURRENCY: "80"
  _CPU: "2"
  _MEMORY: "8Gi"
  _ALLOW_UNAUTH: "true"
  # ⚠️ tanpa trailing slash agar CORS cocok persis
  _CORS_ORIGINS: "https://convoinsight.vercel.app,http://localhost:5173,http://127.0.0.1:5173"

  # --- penting untuk main.py ---
  _GCS_BUCKET: "convoinsight-assets"
  _GCS_DATASETS_PREFIX: "datasets"
  _GCS_DIAGRAMS_PREFIX: "diagrams"
  _GCS_SIGNED_URL_TTL_SECONDS: "604800"

  # Koleksi untuk sessions (tetap)
  _FIRESTORE_COLLECTION: "convo_sessions"
  _FIRESTORE_DATASETS_COLLECTION: "datasets_meta"

  # (Opsional) Pisahkan koleksi utk penyimpanan API key LLM user
  # Hanya efektif kalau kodenya membaca FIRESTORE_PROVIDERS_COLLECTION.
  _FIRESTORE_PROVIDERS_COLLECTION: "convo_providers"

steps:
  # 1) Build image
  - name: "gcr.io/cloud-builders/docker"
    id: "Build image"
    args:
      - "build"
      - "-t"
      - "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO}/${_SERVICE}:$SHORT_SHA"
      - "."

  # 2) Push image
  - name: "gcr.io/cloud-builders/docker"
    id: "Push image"
    args:
      - "push"
      - "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO}/${_SERVICE}:$SHORT_SHA"

  # 3) Deploy ke Cloud Run
  - name: "gcr.io/cloud-builders/gcloud"
    id: "Deploy to Cloud Run"
    entrypoint: "bash"
    args:
      - "-ceu"
      - |
        IMAGE="${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO}/${_SERVICE}:$SHORT_SHA"

        if [[ "${_ALLOW_UNAUTH}" == "true" ]]; then
          AUTH_FLAG="--allow-unauthenticated"
        else
          AUTH_FLAG="--no-allow-unauthenticated"
        fi

        gcloud run deploy "${_SERVICE}" \
          --image "${IMAGE}" \
          --platform managed \
          --region "${_REGION}" \
          --port 8080 \
          --cpu "${_CPU}" \
          --memory "${_MEMORY}" \
          --concurrency "${_CONCURRENCY}" \
          --min-instances "${_MIN_INSTANCES}" \
          --max-instances "${_MAX_INSTANCES}" \
          ${AUTH_FLAG} \
          --set-env-vars "PORT=8080" \
          --set-env-vars "PYTHONUNBUFFERED=1,PYTHONDONTWRITEBYTECODE=1" \
          --set-env-vars "CORS_ORIGINS=${_CORS_ORIGINS}" \
          --set-env-vars "GCS_BUCKET=${_GCS_BUCKET},GCS_DATASETS_PREFIX=${_GCS_DATASETS_PREFIX},GCS_DIAGRAMS_PREFIX=${_GCS_DIAGRAMS_PREFIX},GCS_SIGNED_URL_TTL_SECONDS=${_GCS_SIGNED_URL_TTL_SECONDS}" \
          --set-env-vars "FIRESTORE_COLLECTION=${_FIRESTORE_COLLECTION},FIRESTORE_DATASETS_COLLECTION=${_FIRESTORE_DATASETS_COLLECTION},FIRESTORE_PROVIDERS_COLLECTION=${_FIRESTORE_PROVIDERS_COLLECTION}" \
          --set-secrets "GEMINI_API_KEY=GEMINI_API_KEY:latest,FERNET_KEY=FERNET_KEY:latest"

images:
  - "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO}/${_SERVICE}:$SHORT_SHA"

options:
  logging: CLOUD_LOGGING_ONLY